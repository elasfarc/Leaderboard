(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(15),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([e.id,"/* body {\n  _background-color: orangered;\n\n}\n\n@media only screen and (min-width: 600px) {\n  body {\n    background-color: orangered;\n  }\n} */\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 0.625rem;\n}\n\nbody {\n  font-size: 2rem;\n  padding: 2rem;\n}\n\n.flex {\n  display: flex;\n}\n\n.app-content {\n  border: 1px solid green;\n  justify-content: space-between;\n  height: 80vh;\n}\n\n.scores-container {\n  width: 50%;\n}\n\n.form-container {\n  width: 30%;\n}\n\n.scores-container .content {\n  border: 1px solid blueviolet;\n}\n\n.form {\n  flex-direction: column;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;;;;;;;GASG;;AAEH;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,uBAAuB;EACvB,8BAA8B;EAC9B,YAAY;AACd;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,sBAAsB;AACxB",sourcesContent:["/* body {\n  _background-color: orangered;\n\n}\n\n@media only screen and (min-width: 600px) {\n  body {\n    background-color: orangered;\n  }\n} */\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 0.625rem;\n}\n\nbody {\n  font-size: 2rem;\n  padding: 2rem;\n}\n\n.flex {\n  display: flex;\n}\n\n.app-content {\n  border: 1px solid green;\n  justify-content: space-between;\n  height: 80vh;\n}\n\n.scores-container {\n  width: 50%;\n}\n\n.form-container {\n  width: 30%;\n}\n\n.scores-container .content {\n  border: 1px solid blueviolet;\n}\n\n.form {\n  flex-direction: column;\n}\n"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var i=0;i<e.length;i++){var c=[].concat(e[i]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,o=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a=[],s=!0,i=!1;try{for(t=t.call(e);!(s=(r=t.next()).done)&&(a.push(r.value),!n||a.length!==n);s=!0);}catch(e){i=!0,o=e}finally{try{s||null==t.return||t.return()}finally{if(i)throw o}}return a}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],s=o[3];if(!s)return a;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),u="/*# ".concat(c," */"),d=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[a].concat(d).concat([u]).join("\n")}return[a].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var c=e[i],u=r.base?c[0]+r.base:c[0],d=a[u]||0,l="".concat(u," ").concat(d);a[u]=d+1;var f=t(l),m={css:c[1],media:c[2],sourceMap:c[3]};-1!==f?(n[f].references++,n[f].updater(m)):n.push({identifier:l,updater:o(m,r),references:1}),s.push(l)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=t(a[s]);n[i].references--}for(var c=r(e,o),u=0;u<a.length;u++){var d=t(a[u]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r=t.css,o=t.media,a=t.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),s=t.n(a),i=t(565),c=t.n(i),u=t(216),d=t.n(u),l=t(589),f=t.n(l),m=t(426),p={};p.styleTagTransform=f(),p.setAttributes=c(),p.insert=s().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=d(),n()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;const h="https://us-central1-js-capstone-backend.cloudfunctions.net/api/",A=async({entryPoint:e,data:n})=>{const t=(e=>({method:"POST",headers:{"Content-type":"application/json; charset=UTF-8"},body:JSON.stringify(e)}))(n),r=`${h}${e}`;try{const e=await fetch(r,t);return await e.json()}catch(e){return e}};class g{constructor({name:e,age:n=18,sex:t}){if(!e)throw new Error("Name must be provided!");this.name=e,this.age=n,this.sex=t}}class y{constructor({player:e,score:n}){if(!(e&&e instanceof g))throw new Error("player object must be provided!");this.player=e,this.score=n}}const b=new class{#storage;constructor(){this.#storage=JSON.parse(localStorage.getItem("boards"))||[],this.isFirstTime=0===this.#storage.length}get storage(){return this.#storage}async addLeaderBoard(e){const n={name:e},{result:t}=await A({entryPoint:"games/",data:n}),r=t.substr(14,20);this.#storage.push({id:r,name:e}),this.updateLocalStorage()}updateLocalStorage(){localStorage.setItem("boards",JSON.stringify(this.#storage))}};let v,E;const w=new class{#errors;constructor(){this.#errors=[]}get list(){return this.#errors}addError(e){this.#errors.some((n=>n.message.includes(e.message)))||this.#errors.push(e)}reset(){this.#errors=[]}};function C(e){const n=document.querySelector(".score-form"),t=document.createElement("ul");t.classList.add("errorsList"),e.forEach((e=>{t.innerHTML+=`\n          <li>${e.message}</li>\n      `})),n.appendChild(t)}function x(e){const n=document.querySelector(".scores-container .content");e.forEach((e=>{const t=document.createElement("li");t.classList.add("game"),t.innerText=`${e.user} : ${e.score}`,n.insertAdjacentElement("afterbegin",t)}))}function S(e){const n=e.target.value;n.trim().length<1&&w.addError({message:`${e.target.name} can't be empty!`}),"name"===e.target.name?n.trim().length<3&&w.addError({message:"min name length 3 chars"}):function(e){(isNaN(e)||"number"!=typeof+e)&&w.addError({message:"score must be a number"})}(n),w.list.length>0&&C(w.list)}function B(){const e=document.querySelector(".score-form"),n=e.querySelector(".errorsList");n&&e.removeChild(n),w.reset()}async function L(){document.querySelector(".scores-container .content").innerHTML="";const[...e]=await v.refresh();x(e)}window.onload=async()=>{b.isFirstTime&&(E=window.prompt("Enter leaderBoard Name:"),await b.addLeaderBoard(E));const{id:e}=b.storage[0];v=new class{#storage;constructor(e){this.uniqueID=e,this.#storage=[]}get storage(){return this.#storage}async addGame(e){if(!(e&&e instanceof y))throw new Error("game must be provided!");const n=`games/${this.uniqueID}/scores/`,t={user:e.player.name,score:e.score},{result:r}=await A({entryPoint:n,data:t});return this.#storage.push(e),r}async refresh(){const e=`games/${this.uniqueID}/scores/`,{result:n}=await(async({entryPoint:e})=>{const n=`${h}${e}`;try{const e=await fetch(n);return await e.json()}catch(e){return e}})({entryPoint:e});return n}}(e),document.querySelector(".header h1").innerText+=` ${b.storage[0].name}`,L()};const T=document.forms.score,{name:j,score:I}=T.elements,U=document.querySelector("#refresh");T.addEventListener("submit",(async function(e){e.preventDefault();const{name:n,score:t}=e.target.elements;if(w.list.length>0)C(w.list);else{const e=new g({name:n.value}),r=new y({player:e,score:+t.value});C([{message:await v.addGame(r)}]),x([{user:r.player.name,score:r.score}]),function(...e){[...e].forEach((e=>{e.value=""}))}(n,t)}})),j.addEventListener("blur",S),I.addEventListener("blur",S),j.addEventListener("focus",B),I.addEventListener("focus",B),U.addEventListener("click",L)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,