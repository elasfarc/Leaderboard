(()=>{"use strict";var n={426:(n,e,r)=>{r.d(e,{Z:()=>i});var t=r(15),o=r.n(t),a=r(645),s=r.n(a)()(o());s.push([n.id,"/*\n@media only screen and (min-width: 600px) {\n  body {\n    background-color: orangered;\n  }\n} */\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 0.625rem;\n}\n\nbody {\n  font-family: 'Inter', sans-serif;\n  font-size: 2rem;\n  padding: 2rem;\n  background-color: rgb(32, 41, 68);\n  color: rgb(255, 255, 255);\n}\n\nul {\n  list-style: none;\n}\n\na:link {\n  text-decoration: none;\n}\n\n/* shared classes */\n.flex {\n  display: flex;\n}\n\n.heading {\n  font-family: 'Indie Flower', cursive;\n  display: inline-block;\n  padding: 0 6rem;\n  border-radius: 10px;\n}\n\n.btn,\n.game {\n  background-color: #6573fd;\n}\n\n.btn {\n  padding: 1rem 3rem;\n  border-radius: 10px;\n  color: #f3f0ff;\n}\n\n.game {\n  margin: 2rem 0;\n  padding: 2rem 0 2rem 1.5rem;\n  color: #f3f0ff;\n  border-radius: 10px;\n  font-size: 3rem;\n  letter-spacing: 1.6px;\n  font-weight: 100;\n}\n\n.btn:hover,\n.game:hover {\n  background-color: rgb(166, 176, 251);\n}\n\n.header {\n  margin: 3rem;\n  font-size: 4rem;\n}\n\n.app-content {\n  border: 10px solid rgb(103, 116, 249);\n  border-radius: 20px;\n  padding: 0 3rem;\n  justify-content: space-between;\n  height: 80vh;\n}\n\n.scores-container,\n.form-container {\n  width: 50vw;\n}\n\n.scores-container .title {\n  margin-top: 3rem;\n  padding: 2rem;\n  justify-content: space-between;\n}\n\n.scores-container .content {\n  min-height: 65vh;\n  max-height: 65vh;\n  overflow-y: scroll;\n  padding: 1rem;\n}\n\n.form-container {\n  position: relative;\n  height: 100%;\n}\n\n.form-content {\n  padding: 2rem;\n  width: 30vw;\n  position: absolute;\n  top: 40%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n}\n\n.form-container .content {\n  height: 50%;\n  padding: 2rem;\n  text-align: center;\n}\n\n.score-form {\n  margin-top: 5rem;\n  text-align: right;\n}\n\n.score-form input,\n.score-form button {\n  margin-top: 3rem;\n}\n\n.score-form input {\n  display: block;\n  width: 100%;\n  padding: 1rem 2rem;\n  border-radius: 10px;\n  background-color: rgb(32, 41, 68);\n  color: rgb(255, 255, 255);\n  border: 1px solid rgb(255, 255, 255);\n  font-size: 2rem;\n}\n\n.score-form input:focus {\n  border: 0.5px solid rgb(103, 116, 249);\n  outline: none;\n}\n\n.score-form input::placeholder {\n  color: rgb(103, 116, 249);\n}\n\n.score-form button {\n  font-size: 2rem;\n}\n\n.msg {\n  margin-top: 2rem;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;;;GAKG;;AAEH;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,gCAAgC;EAChC,eAAe;EACf,aAAa;EACb,iCAAiC;EACjC,yBAAyB;AAC3B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;AACvB;;AAEA,mBAAmB;AACnB;EACE,aAAa;AACf;;AAEA;EACE,oCAAoC;EACpC,qBAAqB;EACrB,eAAe;EACf,mBAAmB;AACrB;;AAEA;;EAEE,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,2BAA2B;EAC3B,cAAc;EACd,mBAAmB;EACnB,eAAe;EACf,qBAAqB;EACrB,gBAAgB;AAClB;;AAEA;;EAEE,oCAAoC;AACtC;;AAEA;EACE,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,qCAAqC;EACrC,mBAAmB;EACnB,eAAe;EACf,8BAA8B;EAC9B,YAAY;AACd;;AAEA;;EAEE,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,kBAAkB;EAClB,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,kBAAkB;EAClB,mBAAmB;EACnB,iCAAiC;EACjC,yBAAyB;EACzB,oCAAoC;EACpC,eAAe;AACjB;;AAEA;EACE,sCAAsC;EACtC,aAAa;AACf;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:["/*\n@media only screen and (min-width: 600px) {\n  body {\n    background-color: orangered;\n  }\n} */\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 0.625rem;\n}\n\nbody {\n  font-family: 'Inter', sans-serif;\n  font-size: 2rem;\n  padding: 2rem;\n  background-color: rgb(32, 41, 68);\n  color: rgb(255, 255, 255);\n}\n\nul {\n  list-style: none;\n}\n\na:link {\n  text-decoration: none;\n}\n\n/* shared classes */\n.flex {\n  display: flex;\n}\n\n.heading {\n  font-family: 'Indie Flower', cursive;\n  display: inline-block;\n  padding: 0 6rem;\n  border-radius: 10px;\n}\n\n.btn,\n.game {\n  background-color: #6573fd;\n}\n\n.btn {\n  padding: 1rem 3rem;\n  border-radius: 10px;\n  color: #f3f0ff;\n}\n\n.game {\n  margin: 2rem 0;\n  padding: 2rem 0 2rem 1.5rem;\n  color: #f3f0ff;\n  border-radius: 10px;\n  font-size: 3rem;\n  letter-spacing: 1.6px;\n  font-weight: 100;\n}\n\n.btn:hover,\n.game:hover {\n  background-color: rgb(166, 176, 251);\n}\n\n.header {\n  margin: 3rem;\n  font-size: 4rem;\n}\n\n.app-content {\n  border: 10px solid rgb(103, 116, 249);\n  border-radius: 20px;\n  padding: 0 3rem;\n  justify-content: space-between;\n  height: 80vh;\n}\n\n.scores-container,\n.form-container {\n  width: 50vw;\n}\n\n.scores-container .title {\n  margin-top: 3rem;\n  padding: 2rem;\n  justify-content: space-between;\n}\n\n.scores-container .content {\n  min-height: 65vh;\n  max-height: 65vh;\n  overflow-y: scroll;\n  padding: 1rem;\n}\n\n.form-container {\n  position: relative;\n  height: 100%;\n}\n\n.form-content {\n  padding: 2rem;\n  width: 30vw;\n  position: absolute;\n  top: 40%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n}\n\n.form-container .content {\n  height: 50%;\n  padding: 2rem;\n  text-align: center;\n}\n\n.score-form {\n  margin-top: 5rem;\n  text-align: right;\n}\n\n.score-form input,\n.score-form button {\n  margin-top: 3rem;\n}\n\n.score-form input {\n  display: block;\n  width: 100%;\n  padding: 1rem 2rem;\n  border-radius: 10px;\n  background-color: rgb(32, 41, 68);\n  color: rgb(255, 255, 255);\n  border: 1px solid rgb(255, 255, 255);\n  font-size: 2rem;\n}\n\n.score-form input:focus {\n  border: 0.5px solid rgb(103, 116, 249);\n  outline: none;\n}\n\n.score-form input::placeholder {\n  color: rgb(103, 116, 249);\n}\n\n.score-form button {\n  font-size: 2rem;\n}\n\n.msg {\n  margin-top: 2rem;\n}\n"],sourceRoot:""}]);const i=s},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r=n(e);return e[2]?"@media ".concat(e[2]," {").concat(r,"}"):r})).join("")},e.i=function(n,r,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var i=0;i<n.length;i++){var A=[].concat(n[i]);t&&o[A[0]]||(r&&(A[2]?A[2]="".concat(r," and ").concat(A[2]):A[2]=r),e.push(A))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,t=new Array(e);r<e;r++)t[r]=n[r];return t}n.exports=function(n){var r,t,o=(t=4,function(n){if(Array.isArray(n))return n}(r=n)||function(n,e){var r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var t,o,a=[],s=!0,i=!1;try{for(r=r.call(n);!(s=(t=r.next()).done)&&(a.push(t.value),!e||a.length!==e);s=!0);}catch(n){i=!0,o=n}finally{try{s||null==r.return||r.return()}finally{if(i)throw o}}return a}}(r,t)||function(n,r){if(n){if("string"==typeof n)return e(n,r);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?e(n,r):void 0}}(r,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],s=o[3];if(!s)return a;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),c="/*# ".concat(A," */"),d=s.sources.map((function(n){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(n," */")}));return[a].concat(d).concat([c]).join("\n")}return[a].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var a={},s=[],i=0;i<n.length;i++){var A=n[i],c=t.base?A[0]+t.base:A[0],d=a[c]||0,l="".concat(c," ").concat(d);a[c]=d+1;var m=r(l),u={css:A[1],media:A[2],sourceMap:A[3]};-1!==m?(e[m].references++,e[m].updater(u)):e.push({identifier:l,updater:o(u,t),references:1}),s.push(l)}return s}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<a.length;s++){var i=r(a[s]);e[i].references--}for(var A=t(n,o),c=0;c<a.length;c++){var d=r(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=A}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t=r.css,o=r.media,a=r.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,n)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var a=e[t]={id:t,exports:{}};return n[t](a,a.exports,r),a.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=r(379),e=r.n(n),t=r(795),o=r.n(t),a=r(569),s=r.n(a),i=r(565),A=r.n(i),c=r(216),d=r.n(c),l=r(589),m=r.n(l),u=r(426),f={};f.styleTagTransform=m(),f.setAttributes=A(),f.insert=s().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const g="https://us-central1-js-capstone-backend.cloudfunctions.net/api/",p=async({entryPoint:n,data:e})=>{const r=(n=>({method:"POST",headers:{"Content-type":"application/json; charset=UTF-8"},body:JSON.stringify(n)}))(e),t=`${g}${n}`;try{const n=await fetch(t,r);return await n.json()}catch(n){return n}};class h{constructor({name:n,age:e=18,sex:r}){if(!n)throw new Error("Name must be provided!");this.name=n,this.age=e,this.sex=r}}class E{constructor({player:n,score:e}){if(!(n&&n instanceof h))throw new Error("player object must be provided!");this.player=n,this.score=e}}const C=new class{#storage;constructor(){this.#storage=JSON.parse(localStorage.getItem("boards"))||[],this.isFirstTime=0===this.#storage.length}get storage(){return this.#storage}async addLeaderBoard(n){const e={name:n},{result:r}=await p({entryPoint:"games/",data:e}),t=r.substr(14,20);this.#storage.push({id:t,name:n}),this.updateLocalStorage()}updateLocalStorage(){localStorage.setItem("boards",JSON.stringify(this.#storage))}};let b,B;const y=new class{#errors;constructor(){this.#errors=[]}get list(){return this.#errors}addError(n){this.#errors.some((e=>e.message.includes(n.message)))||this.#errors.push(n)}reset(){this.#errors=[]}};window.onload=async()=>{C.isFirstTime&&(B=window.prompt("Enter leaderBoard Name:"),await C.addLeaderBoard(B));const{id:n}=C.storage[0];b=new class{#storage;constructor(n){this.uniqueID=n,this.#storage=[]}get storage(){return this.#storage}async addGame(n){if(!(n&&n instanceof E))throw new Error("game must be provided!");const e=`games/${this.uniqueID}/scores/`,r={user:n.player.name,score:n.score},{result:t}=await p({entryPoint:e,data:r});return this.#storage.push(n),t}async refresh(){const n=`games/${this.uniqueID}/scores/`,{result:e}=await(async({entryPoint:n})=>{const e=`${g}${n}`;try{const n=await fetch(e);return await n.json()}catch(n){return n}})({entryPoint:n});return e}}(n),document.querySelector(".header h1").insertAdjacentText("afterbegin",`${C.storage[0].name} `),S()};const v=n=>{const e=document.querySelector(".score-form"),r=document.createElement("ul");r.classList.add("errorsList"),n.forEach((n=>{r.innerHTML+=`\n          <li class='msg'>${n.message}</li>\n      `})),e.appendChild(r)},w=n=>{const e=document.querySelector(".scores-container .content");n.forEach((n=>{const r=document.createElement("li");r.classList.add("game"),r.innerText=`${n.user} : ${n.score}`,e.insertAdjacentElement("afterbegin",r)}))},x=n=>{const e=n.target.value;e.trim().length<1&&y.addError({message:`${n.target.name} can't be empty!`}),"name"===n.target.name?e.trim().length<3&&y.addError({message:"min name length 3 chars"}):(n=>{(isNaN(n)||"number"!=typeof+n)&&y.addError({message:"score must be a number"})})(e),y.list.length>0&&v(y.list)},k=()=>{const n=document.querySelector(".score-form"),e=n.querySelector(".errorsList");e&&n.removeChild(e),y.reset()},S=async()=>{document.querySelector(".scores-container .content").innerHTML="";const[...n]=await b.refresh();w(n)},j=document.forms.score,{name:L,score:T}=j.elements,q=document.querySelector("#refresh");j.addEventListener("submit",(async n=>{n.preventDefault();const{name:e,score:r}=n.target.elements;if(y.list.length>0)v(y.list);else{const n=new h({name:e.value}),t=new E({player:n,score:+r.value}),o=await b.addGame(t);v([{message:o}]),w([{user:t.player.name,score:t.score}]),((...n)=>{[...n].forEach((n=>{n.value=""}))})(e,r)}})),L.addEventListener("blur",x),T.addEventListener("blur",x),L.addEventListener("focus",k),T.addEventListener("focus",k),q.addEventListener("click",S)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,