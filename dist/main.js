(()=>{"use strict";var e={426:(e,n,r)=>{r.d(n,{Z:()=>i});var t=r(15),o=r.n(t),a=r(645),s=r.n(a)()(o());s.push([e.id,"/* body {\n  _background-color: orangered;\n\n}\n\n@media only screen and (min-width: 600px) {\n  body {\n    background-color: orangered;\n  }\n} */\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 0.625rem;\n}\n\nbody {\n  font-size: 2rem;\n  padding: 2rem;\n}\n\n.flex {\n  display: flex;\n}\n\n.app-content {\n  border: 1px solid green;\n  justify-content: space-between;\n  height: 80vh;\n}\n\n.scores-container {\n  width: 50%;\n}\n\n.form-container {\n  width: 30%;\n}\n\n.scores-container .content {\n  border: 1px solid blueviolet;\n}\n\n.form {\n  flex-direction: column;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;;;;;;;GASG;;AAEH;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,uBAAuB;EACvB,8BAA8B;EAC9B,YAAY;AACd;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,sBAAsB;AACxB",sourcesContent:["/* body {\n  _background-color: orangered;\n\n}\n\n@media only screen and (min-width: 600px) {\n  body {\n    background-color: orangered;\n  }\n} */\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 0.625rem;\n}\n\nbody {\n  font-size: 2rem;\n  padding: 2rem;\n}\n\n.flex {\n  display: flex;\n}\n\n.app-content {\n  border: 1px solid green;\n  justify-content: space-between;\n  height: 80vh;\n}\n\n.scores-container {\n  width: 50%;\n}\n\n.form-container {\n  width: 30%;\n}\n\n.scores-container .content {\n  border: 1px solid blueviolet;\n}\n\n.form {\n  flex-direction: column;\n}\n"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r=e(n);return n[2]?"@media ".concat(n[2]," {").concat(r,"}"):r})).join("")},n.i=function(e,r,t){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(t)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var i=0;i<e.length;i++){var c=[].concat(e[i]);t&&o[c[0]]||(r&&(c[2]?c[2]="".concat(r," and ").concat(c[2]):c[2]=r),n.push(c))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=new Array(n);r<n;r++)t[r]=e[r];return t}e.exports=function(e){var r,t,o=(t=4,function(e){if(Array.isArray(e))return e}(r=e)||function(e,n){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var t,o,a=[],s=!0,i=!1;try{for(r=r.call(e);!(s=(t=r.next()).done)&&(a.push(t.value),!n||a.length!==n);s=!0);}catch(e){i=!0,o=e}finally{try{s||null==r.return||r.return()}finally{if(i)throw o}}return a}}(r,t)||function(e,r){if(e){if("string"==typeof e)return n(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(e,r):void 0}}(r,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],s=o[3];if(!s)return a;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),u="/*# ".concat(c," */"),l=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[a].concat(l).concat([u]).join("\n")}return[a].join("\n")}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},s=[],i=0;i<e.length;i++){var c=e[i],u=t.base?c[0]+t.base:c[0],l=a[u]||0,d="".concat(u," ").concat(l);a[u]=l+1;var f=r(d),m={css:c[1],media:c[2],sourceMap:c[3]};-1!==f?(n[f].references++,n[f].updater(m)):n.push({identifier:d,updater:o(m,t),references:1}),s.push(d)}return s}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=r(a[s]);n[i].references--}for(var c=t(e,o),u=0;u<a.length;u++){var l=r(a[u]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=c}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t=r.css,o=r.media,a=r.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=r(379),n=r.n(e),t=r(795),o=r.n(t),a=r(569),s=r.n(a),i=r(565),c=r.n(i),u=r(216),l=r.n(u),d=r(589),f=r.n(d),m=r(426),A={};A.styleTagTransform=f(),A.setAttributes=c(),A.insert=s().bind(null,"head"),A.domAPI=o(),A.insertStyleElement=l(),n()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;class p{constructor({name:e,age:n=18,sex:r}){if(!e)throw new Error("Name must be provided!");this.name=e,this.age=n,this.sex=r}}class h{constructor({player:e,score:n}){if(!(e&&e instanceof p))throw new Error("player object must be provided!");this.player=e,this.score=n}}const v=new class{#storage;constructor(){this.#storage=[]}get storage(){return this.#storage}addGame(e){if(!(e&&e instanceof h))throw new Error("game must be provided!");return this.#storage.push(e),e}},g=new class{#errors;constructor(){this.#errors=[]}get list(){return this.#errors}addError(e){this.#errors.some((n=>n.message.includes(e.message)))||this.#errors.push(e)}reset(){this.#errors=[]}};function b(e){const n=document.querySelector(".score-form"),r=document.createElement("ul");r.classList.add("errorsList"),e.forEach((e=>{r.innerHTML+=`\n          <li>${e.message}</li>\n      `})),n.appendChild(r)}function y(e){const n=e.target.value;n.trim().length<1&&g.addError({message:`${e.target.name} can't be empty!`}),"name"===e.target.name?n.trim().length<3&&g.addError({message:"min name length 3 chars"}):function(e){(isNaN(e)||"number"!=typeof+e)&&g.addError({message:"score must be a number"})}(n),g.list.length>0&&b(g.list)}function E(){const e=document.querySelector(".score-form"),n=e.querySelector(".errorsList");n&&e.removeChild(n),g.reset()}const C=document.forms.score,{name:x,score:w}=C.elements;C.addEventListener("submit",(function(e){e.preventDefault();const{name:n,score:r}=e.target.elements;if(g.list.length>0)b(g.list),g.reset();else{const e=new p({name:n.value}),t=new h({player:e,score:+r.value});v.addGame(t),function(e){document.querySelector(".scores-container .content").innerHTML+=`\n        <li class='game'> ${e.player.name} : ${e.score} </li>\n    `}(t),function(...e){[...e].forEach((e=>{e.value=""}))}(n,r)}})),x.addEventListener("blur",y),w.addEventListener("blur",y),x.addEventListener("focus",E),w.addEventListener("focus",E)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,